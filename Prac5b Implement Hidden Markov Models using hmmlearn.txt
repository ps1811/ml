# Install hmmlearn
!pip install hmmlearn
# Import necessary libraries
import numpy as np
import pandas as pd
from hmmlearn import hmm
import matplotlib.pyplot as plt
# Generate synthetic observable data
np.random.seed(42)

# Create a sequence of observations and hidden states
observations = np.random.choice(['A', 'B', 'C'], size=100, p=[0.5, 0.3, 0.2])
hidden_states = np.random.choice(['X', 'Y'], size=100, p=[0.6, 0.4])

# Save the data in a DataFrame for analysis
data = pd.DataFrame({'Observations': observations, 'Hidden States': hidden_states})
print("Generated Data:")
print(data.head())
# Encode the observations into integers
observation_mapping = {obs: idx for idx, obs in enumerate(np.unique(observations))}
encoded_observations = np.array([observation_mapping[obs] for obs in observations])

# Print the mapping
print("Observation Encoding:")
print(observation_mapping)
# Initialize the HMM model
n_states = 2  # Number of hidden states
n_observations = len(observation_mapping)  # Number of unique observations

model = hmm.MultinomialHMM(n_components=n_states, random_state=42, n_iter=100, tol=0.01)

# Define start probabilities (initial distribution of states)
start_probs = np.array([0.6, 0.4])  # Assumed probabilities
model.startprob_ = start_probs

# Define transition probabilities between states
trans_probs = np.array([
    [0.7, 0.3],  # From state X
    [0.4, 0.6],  # From state Y
])
model.transmat_ = trans_probs

# Define emission probabilities (probability of observations given states)
emission_probs = np.array([
    [0.5, 0.4, 0.1],  # State X emits A, B, C
    [0.2, 0.3, 0.5],  # State Y emits A, B, C
])
model.emissionprob_ = emission_probs

# Print the configured model parameters
print("Start Probabilities:", model.startprob_)
print("Transition Matrix:", model.transmat_)
print("Emission Probabilities:", model.emissionprob_)
# Reshape the data for HMM (requires 2D array)
encoded_observations = encoded_observations.reshape(-1, 1)

# Fit the model
model.fit(encoded_observations)

# Predict hidden states for the observations
predicted_states = model.predict(encoded_observations)

# Print the predicted states
print("Predicted States:")
print(predicted_states)
# Map predicted states back to their original labels
state_mapping = {0: 'X', 1: 'Y'}
predicted_state_labels = [state_mapping[state] for state in predicted_states]

# Add predicted states to the DataFrame
data['Predicted States'] = predicted_state_labels

# Display the first few rows with predicted states
print("Data with Predicted States:")
print(data.head())

# Plot the observations and predicted states
plt.figure(figsize=(12, 6))
plt.plot(data['Observations'], label='Observations', marker='o', linestyle='-', alpha=0.7)
plt.plot(data['Predicted States'], label='Predicted States', marker='x', linestyle='--', alpha=0.7)
plt.legend()
plt.title("Observations and Predicted States")
plt.xlabel("Time")
plt.ylabel("Value")
plt.show()
