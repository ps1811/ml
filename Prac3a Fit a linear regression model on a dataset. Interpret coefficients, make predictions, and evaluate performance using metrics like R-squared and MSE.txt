# Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
# Create a sample dataset
data = {
    'House_Size': [750, 800, 850, 900, 1000, 1100, 1200, 1300, 1400, 1500],
    'Price': [150000, 160000, 165000, 170000, 180000, 190000, 200000, 210000, 220000, 230000]
}

# Convert the dataset into a DataFrame
df = pd.DataFrame(data)

# Save to CSV file
df.to_csv('house_prices.csv', index=False)

# Display the dataset
print("Dataset:")
print(df)
# Load the dataset
dataset = pd.read_csv('house_prices.csv')

# Display the first few rows
print("\nLoaded Dataset:")
print(dataset.head())
# Features and target variable
X = dataset[['House_Size']]  # Feature: House size
y = dataset['Price']         # Target: Price

# Split data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("\nTraining and Testing Data Sizes:")
print("Training Data Size:", X_train.shape[0])
print("Testing Data Size:", X_test.shape[0])
# Initialize and fit the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Display the coefficients
print("\nModel Coefficients:")
print("Slope (m):", model.coef_[0])
print("Intercept (b):", model.intercept_)
# Predict on the test set
y_pred = model.predict(X_test)

# Display predictions
print("\nPredictions on Test Data:")
print("Actual Prices:", y_test.values)
print("Predicted Prices:", y_pred)
# Calculate evaluation metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Display metrics
print("\nModel Performance Metrics:")
print("Mean Squared Error (MSE):", mse)
print("R-squared (RÂ²):", r2)
# Scatter plot of the training data
plt.scatter(X_train, y_train, color='blue', label='Training Data')

# Plot the regression line
plt.plot(X_train, model.predict(X_train), color='red', label='Regression Line')

# Scatter plot of the test data
plt.scatter(X_test, y_test, color='green', label='Test Data')

plt.title("Simple Linear Regression")
plt.xlabel("House Size (sq ft)")
plt.ylabel("Price ($)")
plt.legend()
plt.show()
